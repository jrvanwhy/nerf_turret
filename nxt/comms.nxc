#ifndef COMMS_NXC
#define COMMS_NXC

// Include the subsystems we control
#include "blaster.nxc"
#include "estop.nxc"
#include "pitch.nxc"
#include "yaw.nxc"

// Host -> NXT Command IDs
#define COMM_SETYAW_ID       1
#define COMM_SETPITCH_ID     2
#define COMM_SETRELYAW_ID    3
#define COMM_SETRELPITCH_ID  4
#define COMM_ZEROYAW_ID      5
#define COMM_SHOOTBEGIN_ID   7
#define COMM_SHOOTEND_ID     8
#define COMM_SHOOTHOLD_ID    9
#define COMM_QUERYYAW_ID    12
#define COMM_QUERYPITCH_ID  13
#define COMM_ABORT_ID       14

// Mailboxes
#define COMM_RX_MAILBOX MAILBOX1
#define COMM_TX_MAILBOX MAILBOX2

// Transmit buffer
string comm_tx_buf = "";

void comms_tx_estop() {
	byte estop_msg_bytes[] = {3};
	string estop_msg_str = ByteArrayToStr(estop_msg_bytes);
	SendMessage(COMM_TX_MAILBOX, estop_msg_str);
}

// Function to decode a signed integer.
int comms_decode_int(byte lsb, char msb) {
	return UCHAR_MAX * msb + lsb;
}

void comms_update() {
	// Buffer the message will be stored into
	string rx_buf;

	// Try to receive a message. The return value of ReceiveMessage()
	// is the opposite of its documentation, hence the "was_empty"
	// rather than "success" name for the return value variable.
	char was_empty = ReceiveMessage(COMM_RX_MAILBOX, true, rx_buf);

	// Quit now if we didn't receive anything.
	if (was_empty) {
		return;
	}

	// Length of the received packet
	int msg_len = strlen(rx_buf);

	// Current packet position within the string
	unsigned int cur_loc = 0;

	// Iterate until we're done processing all the commands
	while (cur_loc < msg_len) {
		// Switch on the command ID byte
		switch (rx_buf[cur_loc]) {
			case COMM_SETYAW_ID:
				yaw_set(comms_decode_int(rx_buf[cur_loc+1], rx_buf[cur_loc+2]));
				cur_loc += 3;
				break;

			case COMM_SETPITCH_ID:
				pitch_set(comms_decode_int(rx_buf[cur_loc+1], rx_buf[cur_loc+2]));
				cur_loc += 3;
				break;

			case COMM_SETRELYAW_ID:
				yaw_set(yaw_get() + comms_decode_int(rx_buf[cur_loc+1], rx_buf[cur_loc+2]));
				cur_loc += 3;
				break;

			case COMM_SETRELPITCH_ID:
				pitch_set(pitch_get() + comms_decode_int(rx_buf[cur_loc+1], rx_buf[cur_loc+2]));
				cur_loc += 3;
				break;

			case COMM_ZEROYAW_ID:
				yaw_zero();
				cur_loc += 1;
				break;

			case COMM_SHOOTBEGIN_ID:
				blaster_fire();
				cur_loc += 1;
				break;

			case COMM_SHOOTEND_ID:
				blaster_stop();
				cur_loc += 1;
				break;

			case COMM_SHOOTHOLD_ID:
				blaster_hold();
				cur_loc += 1;
				break;

			case COMM_QUERYYAW_ID:
				string yaw_msg_num = NumToStr(yaw_get());
				byte yaw_resp_id[] = {1, 0};
				yaw_resp_id[1] = strlen(yaw_msg_num);
				comm_tx_buf = StrCat(comm_tx_buf, ByteArrayToStr(yaw_resp_id), yaw_msg_num);
				cur_loc += 1;
				break;

			case COMM_QUERYPITCH_ID:
				string pitch_msg_num = NumToStr(pitch_get());
				byte pitch_resp_id[] = {2, 0};
				pitch_resp_id[1] = strlen(pitch_msg_num);
				comm_tx_buf = StrCat(comm_tx_buf, ByteArrayToStr(pitch_resp_id), pitch_msg_num);
				cur_loc += 1;
				break;

			case COMM_ABORT_ID:
				abort();

			default:
				// Invalid packet; estop
				estop("Invalid packet");
		}
	}

	// Transmit if we need to
	if (strlen(comm_tx_buf) > 0) {
		SendMessage(COMM_TX_MAILBOX, comm_tx_buf);
		comm_tx_buf = "";
	}
}

#endif // COMMS_NXC

// vim: syntax=c
